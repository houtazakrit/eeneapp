<?php
// src/AppBundle/Entity/User.php

namespace EENE\UserBundle\Entity;

use Symfony\Component\Filesystem\Filesystem;
use FOS\UserBundle\Model\User as BaseUser;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
/**
 * @ORM\Entity(repositoryClass="EENE\ExtractionBundle\Entity\Repository\HomeRepository")
 * @ORM\Table(name="fos_user")
 */
class User extends BaseUser
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(type="string", nullable=true)
     * 
     */
    protected $firstname;
    
    /**
     * @ORM\Column(type="string", nullable=true)
     */
    protected $lastname;

   /**
     * @ORM\Column(type="string", nullable=true)
     */
    protected $organization;
    
    /**
     * @ORM\Column(type="string", nullable=true)
     */
    protected $country;
    
     /**
     * @ORM\OneToMany(targetEntity="\EENE\ExtractionBundle\Entity\NerdFile", mappedBy="user",cascade={"persist", "remove"})
     */
    protected $userNerdFiles;
    
      /**
     * @ORM\OneToMany(targetEntity="\EENE\ExtractionBundle\Entity\TextFile", mappedBy="user",cascade={"persist", "remove"})
     */
    protected $userTextFiles;
    
    
    public function __construct()
    {
        parent::__construct();
        //$this->createUserDirectory();
    }


     /**
     * Get expiresAt
     *
     * @return \DateTime 
     */
    public function getExpiresAt()
    {
        return $this->expiresAt;
    }

    /**
     * Get credentials_expire_at
     *
     * @return \DateTime 
     */
    public function getCredentialsExpireAt()
    {
        return $this->credentialsExpireAt;
    }
    
    /**
     * Set firstname
     *
     * @param string $firstname
     * @return User
     */
    public function setFirstname($firstname)
    {
        $this->firstname = $firstname;

        return $this;
    }

    /**
     * Get firstname
     *
     * @return string 
     */
    public function getFirstname()
    {
        return $this->firstname;
    }

   

    /**
     * Set lastname
     *
     * @param string $lastname
     * @return User
     */
    public function setLastname($lastname)
    {
        $this->lastname = $lastname;

        return $this;
    }

    /**
     * Get lastname
     *
     * @return string 
     */
    public function getLastname()
    {
        return $this->lastname;
    }

    /**
     * Set organization
     *
     * @param string $organization
     * @return User
     */
    public function setOrganization($organization)
    {
        $this->organization = $organization;

        return $this;
    }

    /**
     * Get organization
     *
     * @return string 
     */
    public function getOrganization()
    {
        return $this->organization;
    }

    /**
     * Set country
     *
     * @param string $country
     * @return User
     */
    public function setCountry($country)
    {
        $this->country = $country;

        return $this;
    }

    /**
     * Get country
     *
     * @return string 
     */
    public function getCountry()
    {
        return $this->country;
    }
    /**
     * Add userNerdFile
     *
     * @param \EENE\ExtractionBundle\Entity\NerdFile $userNerdFile
     *
     * @return User
     */
    public function addUserNerdFile(\EENE\ExtractionBundle\Entity\NerdFile $userNerdFile)
    {
        $this->userNerdFiles[] = $userNerdFile;

        return $this;
    }

    /**
     * Remove userNerdFile
     *
     * @param \EENE\ExtractionBundle\Entity\NerdFile $userNerdFile
     */
    public function removeUserNerdFile(\EENE\ExtractionBundle\Entity\NerdFile $userNerdFile)
    {
        $this->userNerdFiles->removeElement($userNerdFile);
    }

    /**
     * Get userNerdFiles
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getUserNerdFiles()
    {
        return $this->userNerdFiles;
    }

    /**
     * Add userTextFile
     *
     * @param \EENE\ExtractionBundle\Entity\TextFile $userTextFile
     *
     * @return User
     */
    public function addUserTextFile(\EENE\ExtractionBundle\Entity\TextFile $userTextFile)
    {
        $this->userTextFiles[] = $userTextFile;

        return $this;
    }

    /**
     * Remove userTextFile
     *
     * @param \EENE\ExtractionBundle\Entity\TextFile $userTextFile
     */
    public function removeUserTextFile(\EENE\ExtractionBundle\Entity\TextFile $userTextFile)
    {
        $this->userTextFiles->removeElement($userTextFile);
    }

    /**
     * Get userTextFiles
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getUserTextFiles()
    {
        return $this->userTextFiles;
    }
    
      /*
    *** créer le dossier de l'utilisateur en serveur (/web/$userdirectory/$username)
    */
    
     public function createUserDirectory(){
        
        $fs = new Filesystem();
         /*
         * Vérifier que le dossier de tous les utilisateus existe car il peut avoir 
         * été modifié dans le fichier de configuration parameters.yml
         */
         if(!$fs->exists($this->getUploadFileDir())){
            //create directory if not exist
             $fs->mkdir($this->getUploadFileDir());
              }
              
        // Créer le dossier utilisateur s'il n'existe pas déjà
          if(!$fs->exists($this->getUploadUserDir())){
            //create directory if not exist
              $fs->mkdir($this->getUploadUserDir());
             }
    }
     /*
    * Récuperer le dossier de l'utilisateur
    */
    public function getUploadUserDir() {
          // calcule du chemin du dossier utilisateur
        $userdirectory = $this->getUploadFileDir().'/'.$this->getUsername();
      
        return $userdirectory;
    }
    
      /*
    * Récuperer le dossier des fichiers
    */
    public function getUploadFileDir() {
          global $kernel;
            $container = $kernel->getContainer();
           //Récupérer les variables globales de la section twig du fichier app/config.yml
           $globals = $container->get('twig')->getGlobals();
           //  Récupérer le nom du dossier où sont stockés les fichiers utilisateurs
           $directoryglobal= __DIR__.'/../../../../web/'.$globals['userdirectory'];
       return $directoryglobal;
    }
        /*
    * supprimer le dossier de l'utilisateur
    */
     public function deleteUploadUserDir() {
        $fs = new Filesystem();
        
         /*
         * Vérifier que le dossier de l'utilisateur existe
         */
         if($fs->exists($this->getUploadUserDir())){
             //supprimer le dossier de serveur
            $fs->remove($this->getUploadUserDir());
         }
        
    }
 
}
