<?php
namespace EENE\ExtractionBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use EENE\ExtractionBundle\Entity\NerdFile;

/**
 * NerdFileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NerdFileRepository extends EntityRepository
{

    //supprimer json file avec son  fichier Text s'il esiste
     public function deleteJsonText($idjson)
    {
     //on selection que les id, les nom des fichiers Text/JSON et date création de fichier Json  et l'extractor utilisé
          $tablefiles =$this->getEntityManager()->
          createQuery('
             select jsonFiles.id as jsonid, text.id as textid
               from ExtractionBundle:TextFile text 
               JOIN text.textNerdFiles jsonFiles
               GROUP BY text.id 
               having count(jsonFiles.id)=1')->getResult();
             
             foreach($tablefiles as $res){
              if($idjson==$res['jsonid']){
                  $textfile = $this->getEntityManager()->getRepository('ExtractionBundle:TextFile')->find($res['textid']);
                   $nerdfile = $this->getEntityManager()->getRepository('ExtractionBundle:NerdFile')->find($res['jsonid']);
                   //appel méthode qui supprime le fichier JSON  de serveur
                  $nerdfile->deleteNerdFile();
                   //appel méthode qui supprime le fichier Text  de serveur
                  $textfile->deleteTextFile();
                   //supprime toutes les entités de fichier NERD de BD
                  foreach($nerdfile->getNerdFileEntities() as $entity) {
                        $this->getEntityManager()->remove($entity);
                    }
                  //supprime le fichier de BD
                  $this->getEntityManager()->remove($nerdfile);
                    //supprime le fichier de BD
                  $this->getEntityManager()->remove($textfile);
                  $this->getEntityManager()->flush();
                 return 1;
              }
           }
        return 0;
    }
    //supprimer seulement json file s'il esiste
   public function deleteOnlyJsonFile($idjson)
    {       
      $nerdfile = $this->getEntityManager()->getRepository('ExtractionBundle:NerdFile')->find($idjson);
        //appel méthode qui supprime le fichier JSON  de serveur
        if(is_object ( $nerdfile)){
         $nerdfile->deleteNerdFile();
          //supprime le fichier de BD
           //supprime toutes les entités de fichier NERD de BD
          foreach($nerdfile->getNerdFileEntities() as $entity) {
                $this->getEntityManager()->remove($entity);
            }
          $this->getEntityManager()->remove($nerdfile);
          $this->getEntityManager()->flush();
              //}
        return 1;
        }
        return 0;
    }
    
  /**
    ** méthode permet d'afficher le détails sur des entités spatiales (geocoded, notGeocoded, notGeocodable )
    ** on fournit comme parametres l'id et le type de l'entité spatiale
    **/
    public function getSpatialEntities($id,$type) {
        
        //on teste sur le type de l'entité spatiale s'il s'agit d'une entité geocodée
        //car les parametres de la requete changent
        if($type==="all"){
        //les parametres utilisés dans la requete cidessous
          $spatialEntities=$this->getEntityManager()->
          createQuery("
             SELECT entities
             FROM ExtractionBundle:Entity entities
               JOIN entities.nerdFile jsonFile
               LEFT JOIN entities.geolocation geo
              WHERE jsonFile.id=:idjsonfile and entities.nerdType='Location'")
             ->setParameter('idjsonfile',$id)->getResult();
        }
        elseif($type==="geocoded"){
             $spatialEntities=$this->getEntityManager()->
          createQuery("
             SELECT entities
               FROM ExtractionBundle:Entity entities
               JOIN entities.nerdFile jsonFile
               LEFT JOIN entities.geolocation geo
              WHERE jsonFile.id=:idjsonfile and geo.geolocatedBy NOT IN ('notGeocoded','notGeocodable')
               and entities.nerdType='Location'")
             ->setParameter('idjsonfile',$id)->getResult();
         }
        else{
        //les parametres utilisés dans la requete cidessous 
        //le type peut etres (notGeocoded, notGeocodable)
           $parameters=array('idjsonfile'=>$id,'type'=>$type);
           $spatialEntities=$this->getEntityManager()->
            createQuery("
             SELECT entities
               FROM ExtractionBundle:Entity entities
               JOIN entities.nerdFile jsonFile
               LEFT JOIN entities.geolocation geo
              WHERE jsonFile.id=:idjsonfile and geo.geolocatedBy=:type
               and entities.nerdType='Location'")
             ->setParameters($parameters)->getResult();
        }
       // var_dump($spatialEntities[0]->getGeolocation());
        //  var_dump($spatialEntities[1]->getGeolocation());
     return $spatialEntities;

   }
 
 
  /**
    ** méthode permet d'afficher le détails sur toutes les entités 
    ** on fournit comme parametres l'id de fichier JSON
    **/
    public function getAllEntities($idjson) {
        
        //on récupere toutes les entités de fichier JSON d'id fourni en parametre
           $entities=$this->getEntityManager()->
            createQuery("
             SELECT entities
               FROM ExtractionBundle:Entity entities
               JOIN entities.nerdFile n
               LEFT JOIN entities.geolocation geo
               LEFT JOIN entities.times time
              WHERE n.id=:idjsonfile")
             ->setParameter('idjsonfile',$idjson)->getResult();

           
           return $entities;
      }
 
  /**
    ** méthode permet d'afficher le détails sur des entités temporels et autres
    ** on fournit comme parametres l'id de fichier JSON
    **/
    public function getTemporelAndOtherEntities($idjson,$entitytype) {
        
        if($entitytype==='temporal'){
        //on récupere toutes les entités de fichier JSON d'id fourni en parametre
           $entities=$this->getEntityManager()->
            createQuery("
             SELECT entities
               FROM ExtractionBundle:Entity entities
               JOIN entities.nerdFile n
              WHERE n.id=:idjsonfile  and entities.nerdType='Time'")
             ->setParameter('idjsonfile',$idjson)->getResult();
        }
        else{
             //on récupere toutes les entités de fichier JSON d'id fourni en parametre
             //cas d'une autre entité (not (Time , Location))
           $entities=$this->getEntityManager()->
            createQuery("
             SELECT entities
             FROM ExtractionBundle:Entity entities
               JOIN entities.nerdFile n
               LEFT JOIN entities.geolocation geo
              WHERE n.id=:idjsonfile  and entities.nerdType not in ('Location','Time')")
             ->setParameter('idjsonfile',$idjson)->getResult();
              
        }

           return $entities;
      }
      
      
      
     //créer 1 json file  (sur serveur et BD) pour la fonctionalité upload de fichier(s)
    public function createNerdFileForUpload($uploadedFile,$textfile,$user)
    {
           // $user= $this->getUser();
                $nerdfile= new NerdFile();
                   $nerdfile->setCreatedAt(new \DateTime());
                   $nerdfile->setSize($uploadedFile->getClientSize());
                   $nerdfile->setName($uploadedFile->getClientOriginalName());
                   $nerdfile->setUser($user);
                   
                   if($textfile!=null ){
                   $nerdfile->setTextFile($textfile);
                   }
                   $uploadedFile->move($user->getUploadUserDir(), $uploadedFile->getClientOriginalName());
                     //insert nerd file in database
                   $em = $this->getEntityManager();
                   
                   $em->persist($nerdfile);
                   $em->flush();
                return $nerdfile;
        
    }
    
    
       //créer 1 json file  (sur serveur et BD) pour la fonctionalité analyse de texte
    public function createNerdFileForAnalyze($jsonfilename, $data, $textfile,$user)
    {
           
                    $nerdfile= new NerdFile();
                   $nerdfile->setCreatedAt(new \DateTime());
                   $nerdfile->setName($jsonfilename);
                   $nerdfile->setUser($user);
                   if($textfile!=null){
                   $nerdfile->setTextFile($textfile);
                   }
                   //créer fichier JSON en serveur 
                   file_put_contents($user->getUploadUserDir().'/'.$jsonfilename, $data);
                     //créer fichier JSON en BD 
                   $em = $this->getEntityManager();
                   $em->persist($nerdfile);
                   $em->flush();
                return $nerdfile;
        
    }
   
     
}
